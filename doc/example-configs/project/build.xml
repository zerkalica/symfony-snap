<?xml version="1.0" encoding="UTF-8"?>

<project name="Default" default="build" basedir="./">
    <property name="srcdir" value="${basedir}/src"/>
    <property name="appdir" value="${basedir}/app"/>
    <property name="webdir" value="${basedir}/web"/>
    <property name="snapdir" value="${basedir}/../symfony-snap"/>
    <property name="builddir" value="${basedir}/build"/>

    <property name="include_path" value="${snapdir}/vendor"/>
    <property name="error_reporting" value="E_ALL&amp;~E_NOTICE&amp;~E_WARNING"/>
    <property name="tz" value="Europe/Moscow"/>

    <property name="php" value="php"/>
    <property name="phpargs" value="-d include_path=${include_path} -d error_reporting=${error_reporting} -d date.timezone=${tz}"/>

    <property name="phpunit" value="${snapdir}/bin/phpunit"/>
    <property name="pdepend" value="${snapdir}/bin/pdepend"/>
    <property name="phpmd" value="${snapdir}/bin/phpmd"/>
    <property name="phpcpd" value="${snapdir}/bin/phpcpd"/>

    <property name="phpcs" value="${snapdir}/bin/phpcs"/>
    <property name="standard" value="Symfony2"/>

    <property name="phploc" value="${snapdir}/bin/phploc"/>

    <property name="phpcb" value="${snapdir}/bin/phpcb"/>
    <property name="phpdoc" value="${snapdir}/bin/phpdoc"/>

    <property name="console" value="${phpargs} ${appdir}/console"/>

    <property name="slnm.rc" value="${snapdir}/bin/selenium-server.jar"/>
    <property name="slnm.port" value="4444"/>
    <property name="slnm.browser" value="*firefox"/>
    <property name="slnm.url" value="http://localhost"/>
    <property name="slnm.testsdir" value="${appdir}/Resources/tests/selenium"/>
    <property name="slnm.reportdir" value="${builddir}/selenium"/>
    <property name="slnm.testsdir.prepared" value="${slnm.reportdir}/tests"/>
    <property name="slnm.fixer" value="${snapdir}/sbin/selenium_fix.php"/>
    <property name="slnm.timeout" value="800"/>

    <property name="java" value="java"/>
    <property name="javaargs" value="-Xms512m -Xmx1024m -Xss128k -jar"/>
    <property name="display" value=":0.0"/>
    <property name="slnm.args" value="-port ${slnm.port}
        -singleWindow
        -timeout ${slnm.timeout}
        -browserTimeout ${slnm.timeout}
        -trustAllSSLCertificates
        -ensureCleanSession
        -htmlSuite ${slnm.browser}"/>
    <property name="bootstrap.builder" value="${snapdir}/vendor/sensio/distribution-bundle/Sensio/Bundle/DistributionBundle/Resources/bin/build_bootstrap.php"/>

    <property name="build.number" value="1"/>

    <property name="test.prefix" value="1"/>

    <property name="umlet.rc" value="${snapdir}/vendor/java/Umlet/umlet.jar"/>
    <property name="umlet.args" value="-action=convert -format=png"/>
    <property name="diagrams.lister" value="${snapdir}/sbin/filelist.php"/>

    <target name="diagrams.clean"
            description="Clean up diagrams">
        <delete dir="${builddir}/diagrams" failonerror="false"/>
    </target>

    <target name="clean" depends="diagrams.clean"
            description="Clean up and create artifact directories">
        <delete dir="${appdir}/cache/test1" failonerror="false"/>
        <delete dir="${appdir}/cache/test2" failonerror="false"/>
        <delete dir="${appdir}/cache/test3" failonerror="false"/>
        <delete dir="${appdir}/cache/stage" failonerror="false"/>
        <delete dir="${appdir}/cache/prod" failonerror="false"/>
        <delete dir="${appdir}/cache/devci" failonerror="false"/>
        <delete dir="${appdir}/cache/dev" failonerror="false"/>
        <delete dir="${appdir}/cache/dev_new" failonerror="false"/>
        <delete dir="${appdir}/cache/prod" failonerror="false"/>
        <delete dir="${appdir}/cache/test" failonerror="false"/>
        <delete dir="${webdir}/bundles" failonerror="false"/>

        <delete failonerror="false">
            <fileset dir="${webdir}/js" includes="*"/>
            <fileset dir="${webdir}/css" includes="*"/>
        </delete>

        <delete dir="${builddir}/code-browser" failonerror="false"/>
        <delete dir="${builddir}/api" failonerror="false"/>
        <delete dir="${builddir}/coverage" failonerror="false"/>
        <delete dir="${builddir}/logs" failonerror="false"/>
        <delete dir="${builddir}/pdepend" failonerror="false"/>
        <delete dir="${builddir}/phpdoc" failonerror="false"/>
        <delete dir="${builddir}/selenium" failonerror="false"/>
        <delete dir="${builddir}" failonerror="false"/>
    </target>

    <target name="prepare"
            description="Create build directory structure">
        <mkdir dir="${builddir}"/>
        <mkdir dir="${builddir}/coverage"/>
        <mkdir dir="${builddir}/logs"/>
        <mkdir dir="${builddir}/pdepend"/>
        <mkdir dir="${builddir}/phpdoc"/>
        <mkdir dir="${builddir}/selenium"/>
        <mkdir dir="${builddir}/selenium/profile"/>
        <mkdir dir="${builddir}/code-browser"/>
        <mkdir dir="${builddir}/api"/>
        <mkdir dir="${builddir}/diagrams"/>
    </target>

    <target name="env.dev" depends="build.bootstrap"
            description="Switching to dev environment">
        <exec executable="${php}" failonerror="true">
            <arg line="${console} millwright:rad:setenv --env=dev --name=dev"/>
        </exec>
    </target>

    <target name="env.devci" depends="build.bootstrap"
            description="Switching to dev ci environment">
        <exec executable="${php}" failonerror="true">
            <arg line="${console} millwright:rad:setenv --env=devci --name=devci"/>
        </exec>
    </target>

    <target name="env.prod" depends="build.bootstrap"
            description="Switching to prod environment">
        <exec executable="${php}" failonerror="true">
            <arg line="${console} millwright:rad:setenv --env=prod --name=prod"/>
        </exec>
    </target>

    <target name="env.stage" depends="build.bootstrap"
            description="Switching to stage environment">
        <exec executable="${php}" failonerror="true">
            <arg line="${console} millwright:rad:setenv --env=stage --name=stage"/>
        </exec>
    </target>

    <target name="env.test" depends="build.bootstrap"
            description="Switching to test environment">
        <exec executable="${php}" failonerror="true">
            <arg line="${console} millwright:rad:setenv --env=test${test.prefix} --name=test${test.prefix}"/>
        </exec>
    </target>

    <target name="report.pdepend"
            description="Generate jdepend.xml and software metrics charts using PHP_Depend">
        <exec executable="${php}">
            <arg line="${phpargs} ${pdepend}
              --jdepend-xml=${builddir}/logs/jdepend.xml
              --jdepend-chart=${builddir}/pdepend/dependencies.svg
              --overview-pyramid=${builddir}/pdepend/overview-pyramid.svg
              ${srcdir}"/>
        </exec>
    </target>

    <target name="report.md"
            description="Generate pmd.xml using PHPMD">
        <exec executable="${php}"  failonerror="false">
            <arg line="${phpargs} ${phpmd}
              ${srcdir}
              xml
              ${basedir}/phpmd.xml
              --reportfile ${builddir}/logs/pmd.xml"/>
        </exec>
    </target>

    <target name="report.cpd"
            description="Generate pmd-cpd.xml using PHPCPD">
        <exec executable="${php}">
            <arg line="${phpargs} ${phpcpd}
              --log-pmd ${builddir}/logs/pmd-cpd.xml
              ${srcdir}"/>
        </exec>
    </target>

    <target name="report.loc"
            description="Generate phploc.csv">
        <exec executable="${php}">
            <arg line="${phpargs} ${phploc}
              --log-csv ${builddir}/logs/phploc.csv ${srcdir}"/>
        </exec>
    </target>

    <target name="report.cs"
            description="Generate checkstyle.xml using PHP_CodeSniffer">
        <exec executable="${php}">
            <arg line="${phpargs} ${phpcs}
              --report=checkstyle
              --report-file=${builddir}/logs/checkstyle.xml
              --standard=${standard}
              ${srcdir}"/>
        </exec>
    </target>

    <target name="report.cb"
            description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="${php}">
            <arg line="${phpargs} ${phpcb}
              --log    ${builddir}/logs
              --source ${srcdir}
              --output ${builddir}/code-browser"/>
        </exec>
    </target>

    <target name="report.doc"
            description="Automated document generation">
        <exec executable="${php}">
            <arg line="${phpargs} ${phpdoc}
              -d ${appdir}lication
              --target ${builddir}/phpdoc"/>
        </exec>
    </target>

    <target name="db.create"
            description="Database creation stub [DESTRUCTIVE]">
        <exec executable="${php}" failonerror="true">
            <arg line="${console} doctrine:database:create -n"/>
        </exec>
    </target>

    <target name="db.drop"
            description="Database drop stub [DESTRUCTIVE]">
        <exec executable="${php}" failonerror="false">
            <arg line="${console} doctrine:database:drop -n --force"/>
        </exec>
    </target>

    <target name="db.schema"
            description="Generate empty schema [DESTRUCTIVE]">
        <exec executable="${php}" failonerror="true">
            <arg line="${console} doctrine:schema:create -n"/>
        </exec>
    </target>

    <target name="db.fixtures"
            description="Load fixtures [DESTRUCTIVE]">
        <exec executable="${php}" failonerror="true">
            <arg line="${console} doctrine:fixtures:load -n"/>
        </exec>
    </target>

    <target name="db.migrate"
            description="Apply migrations">
        <exec executable="${php}" failonerror="false">
            <arg line="${console} doctrine:migrations:migrate -n"/>
        </exec>
    </target>

    <target name="db"
            description="Run the db.drop, db.create, db.schema, db.fixtures [DESTRUCTIVE]">
        <sequential>
            <antcall target="db.drop"/>
            <antcall target="db.create"/>
            <antcall target="db.schema"/>
            <antcall target="db.fixtures"/>
        </sequential>
    </target>

    <target name="phpunit" depends="prepare"
            description="Run unit tests using PHPUnit and generates junit.xml and clover.xml">
        <exec executable="${php}" failonerror="true">
            <arg line="${phpargs} ${phpunit}"/>
        </exec>
    </target>

    <target name="diagrams.render"  depends="prepare"
            description="Render umlet uxf diagrams">
        <apply executable="${java}" failonerror="true">
            <arg line="${javaargs} ${umlet.rc} ${umlet.args}"/>
            <srcfile prefix="-filename=" />
            <targetfile prefix="-output=" />
            <path>
                <fileset dir="${basedir}" includes="**/*.uxf"/>
            </path>
            <regexpmapper from=".*/([^/]+)\.uxf$" to="${builddir}/diagrams/\1.png"/>
        </apply>
    </target>

    <target name="diagrams" depends="diagrams.clean, diagrams.render"
            description="Generate diagrams from umlet schemas">
        <exec executable="${php}" failonerror="true">
            <arg line="${phpargs} ${diagrams.lister} ${builddir}/diagrams ${builddir}/diagrams/index.html"/>
        </exec>
    </target>

    <target name="report" depends="prepare"
            description="Run the report.pdepend, report.md, report.cb, report.cpd, report.cs and report.loc, phpunit">
        <parallel threadCount="1">
            <sequential>
                <antcall target="phpunit"/>
                <antcall target="report.pdepend"/>
                <antcall target="report.cb"/>
                <antcall target="report.cpd"/>
                <antcall target="report.cs"/>
                <antcall target="report.loc"/>
                <antcall target="report.md"/>
                <antcall target="diagrams"/>
           </sequential>
        </parallel>
    </target>

    <target name="selenium.prepare" depends="prepare"
            description="Prepare selenium tests for execution">
        <exec executable="${php}" failonerror="true">
            <arg line="${phpargs} ${slnm.fixer} ${slnm.testsdir} ${slnm.testsdir.prepared} ${slnm.url}"/>
        </exec>
    </target>

    <target name="selenium"  depends="selenium.prepare, db"
            description="Run generic selenium testsuite [DESTRUCTIVE]">
        <apply executable="${java}" failonerror="true">
            <arg line="${javaargs} ${slnm.rc} ${slnm.args} ${slnm.url}"/>
            <srcfile/>
            <targetfile/>
            <fileset dir="${slnm.testsdir.prepared}" includes="*.suite"/>
            <mapper type="glob" from="*.suite" to="${slnm.reportdir}/*.html"/>
        </apply>
    </target>

    <target name="test" depends="clean, build"
            description="Run phpunit, selenium.prepare, selenium">
        <parallel threadCount="1">
            <sequential>
                <antcall target="phpunit"/>
                <antcall target="selenium"/>
            </sequential>
        </parallel>
    </target>

    <target name="version.extra"
            description="Increment extra version number">
        <exec executable="${php}" failonerror="false">
            <arg line="${console} millwright:rad:version:increment --part=extra"/>
        </exec>
    </target>

    <target name="version.minor"
            description="Increment minor version number">
        <exec executable="${php}" failonerror="false">
            <arg line="${console} millwright:rad:version:increment --part=minor"/>
        </exec>
    </target>

    <target name="version.major"
            description="Increment major version number">
        <exec executable="${php}" failonerror="false">
            <arg line="${console} millwright:rad:version:increment --part=major"/>
        </exec>
    </target>

    <target name="version.build"
            description="Set build number">
        <exec executable="${php}" failonerror="false">
            <arg line="${console} millwright:rad:build:set --number=${build.number}"/>
        </exec>
    </target>

    <target name="build.assets.install"
            description="Symfony assets install">
        <exec executable="${php}" failonerror="true">
            <arg line="${console} assets:install ${webdir}"/>
        </exec>
    </target>

    <target name="build.assets.dump"
            description="Symfony assets dump">
        <exec executable="${php}" failonerror="true">
            <arg line="${console} assetic:dump ${webdir}"/>
        </exec>
    </target>

    <target name="build.bootstrap"
            description="Symfony bootstrap cache generation">
        <exec executable="${php}" failonerror="true">
            <arg line="${phpargs} ${bootstrap.builder} ${appdir}"/>
        </exec>
    </target>

    <target name="build" depends="prepare"
            description="Run the build.bootstrap, build.assets.install, build.assets.dump">
        <sequential>
            <antcall target="build.bootstrap"/>
            <antcall target="build.assets.install"/>
            <antcall target="build.assets.dump"/>
        </sequential>
    </target>

    <target name="update" depends="build"
            description="Run build, db.migrate">
        <sequential>
            <antcall target="db.migrate"/>
        </sequential>
    </target>
</project>
